{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\n\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var _ref = dirtyOptions || {},\n      _ref$fractionDigits = _ref.fractionDigits,\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","map":{"version":3,"names":["toDate","isValid","addLeadingZeros","toInteger","formatRFC3339","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","_ref","_ref$fractionDigits","fractionDigits","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","floor","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign"],"sources":["/Users/macbook/workspace/Goal_Keeper_App/node_modules/date-fns/esm/formatRFC3339/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var _ref = dirtyOptions || {},\n      _ref$fractionDigits = _ref.fractionDigits,\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}