{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/workspace/Goal_Keeper_App/src/components/views/GoalForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GoalForm = () => {\n  _s();\n\n  const history = useHistory();\n  const [goal, updateGoal] = useState({\n    // capturing state with an object placeholder that will contain the values\n    // chosen form options in the DOM\n    goalDescription: \"\",\n    goalObjective: \"\",\n    goalProgress: \"\",\n    goalMileStone: \"\",\n    goalDate: \"\",\n    customerId: 0,\n    emergency: false\n  }); // React hook that is used to push the user to previous stored browser data\n\n  const submitGoal = captureEventToPreventDefaultBehavior => {\n    // This parameter \"captureEventToPreventDefault\" stops the default behavior of the \n    // browser which in this case is to Submit the goal. By preventing the default browser behavior\n    // the browser will display the other html.\n    captureEventToPreventDefaultBehavior.preventDefault();\n    const newGoal = {\n      // the goal object being updated with values from the state variable \"goal\"\n      goalDescription: goal.goalDescription,\n      goalObjective: goal.goalObjective,\n      goalProgress: goal.goalProgress,\n      goalMileStone: goal.goalMileStone,\n      goalDate: goal.goalDate,\n      // dot notation to create the value pairs on the new object keys\n      customerId: parseInt(localStorage.getItem(\"goal_keeper\")),\n      // getting the customerId value from localStorage\n      //  is hard-coded because you can't have a value of \"0\"in the\n      // the API because the API will delete the key.\n      dateCompleted: \"\"\n    };\n    const fetchOption = {\n      // POST fetch call to send the new object to the API\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newGoal) // the body of the fetch object has to be converted to JSON string\n\n    };\n    return fetch(\"http://localhost:8088/goals\", fetchOption) // the fetchOption object is being sent to the url in the return fetch\n    .then(() => {\n      history.push(\"/goals\"); // Once the object is sent to the API, the user is then \n      // pushed/routed back to the /goals route that is \n      // specified as goalList in the ApplicationViews component\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ticketForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"ticketForm__title\",\n      children: \"New Goal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Enter a new goal to start:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          // The input tag holds all of the logic for capturing the \n          // user input for the description field\n          required: true,\n          autoFocus: true,\n          type: \"text\" // The code that tells what the form field will be (type=\"text\")\n          ,\n          className: \"form-control\",\n          placeholder: \"Brief description of your goal\" // The onChange event listener is used to capture the user input from the DOM\n          ,\n          onChange: event => {\n            // function of the onChange event\n            const copyOfTicketState = { ...ticket\n            }; // copying the value of the ticket state variable into a mutable variable\n            // state variables can't be modified directly\n\n            copyOfTicketState.description = event.target.value; // assigning to the key of description on the copyOfTicketState variable\n            // the value of the event.target\n\n            updateTicket(copyOfTicketState); // invoking the updateTicket state setter function with the copyOfTicketState variable\n            // with the value of the event assigned to the description value \n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Emergency:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: event => {\n            const copyOfTicketState = { ...ticket\n            };\n            copyOfTicketState.emergency = event.target.checked;\n            updateTicket(copyOfTicketState);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: submitTicket,\n      children: \"Submit Ticket\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GoalForm, \"rmfPHRYm/F5RR2bVKf+oEqwbYS4=\", false, function () {\n  return [useHistory];\n});\n\n_c = GoalForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoalForm\");","map":{"version":3,"names":["React","useState","useHistory","GoalForm","history","goal","updateGoal","goalDescription","goalObjective","goalProgress","goalMileStone","goalDate","customerId","emergency","submitGoal","captureEventToPreventDefaultBehavior","preventDefault","newGoal","parseInt","localStorage","getItem","dateCompleted","fetchOption","method","headers","body","JSON","stringify","fetch","then","push","event","copyOfTicketState","ticket","description","target","value","updateTicket","checked","submitTicket"],"sources":["/Users/macbook/workspace/Goal_Keeper_App/src/components/views/GoalForm.js"],"sourcesContent":["import React, { useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\n\nexport const GoalForm = () => {\n    const history = useHistory()\n    const [goal, updateGoal] = useState({\n        // capturing state with an object placeholder that will contain the values\n        // chosen form options in the DOM\n        goalDescription: \"\",\n        goalObjective: \"\",\n        goalProgress: \"\",\n        goalMileStone: \"\",\n        goalDate: \"\",\n        customerId: 0,\n        emergency: false\n    });\n\n    \n    // React hook that is used to push the user to previous stored browser data\n\n\n\n    const submitGoal = (captureEventToPreventDefaultBehavior) => {\n        // This parameter \"captureEventToPreventDefault\" stops the default behavior of the \n        // browser which in this case is to Submit the goal. By preventing the default browser behavior\n        // the browser will display the other html.\n        captureEventToPreventDefaultBehavior.preventDefault()\n\n        const newGoal={\n            // the goal object being updated with values from the state variable \"goal\"\n        goalDescription: goal.goalDescription,\n        goalObjective: goal.goalObjective,\n        goalProgress: goal.goalProgress,\n        goalMileStone: goal.goalMileStone,\n        goalDate: goal.goalDate,\n            // dot notation to create the value pairs on the new object keys\n        customerId: parseInt(localStorage.getItem(\"goal_keeper\")),\n            // getting the customerId value from localStorage\n            \n            //  is hard-coded because you can't have a value of \"0\"in the\n            // the API because the API will delete the key.\n            dateCompleted: \"\"\n        }\n\n        const fetchOption = {\n            // POST fetch call to send the new object to the API\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\" \n            },\n            body: JSON.stringify(newGoal)\n            // the body of the fetch object has to be converted to JSON string\n        }\n        return fetch(\"http://localhost:8088/goals\", fetchOption)\n        // the fetchOption object is being sent to the url in the return fetch\n                .then(() => {\n                    history.push(\"/goals\")\n                    // Once the object is sent to the API, the user is then \n                    // pushed/routed back to the /goals route that is \n                    // specified as goalList in the ApplicationViews component\n                    })\n    }\n\n\n\n\n\n    return (\n        <form className=\"ticketForm\">\n            <h2 className=\"ticketForm__title\">New Goal</h2>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Enter a new goal to start:</label>\n                    <input\n                    // The input tag holds all of the logic for capturing the \n                    // user input for the description field\n                        required autoFocus\n                        type=\"text\"\n                        // The code that tells what the form field will be (type=\"text\")\n                        className=\"form-control\"\n                        placeholder=\"Brief description of your goal\"\n\n                        // The onChange event listener is used to capture the user input from the DOM\n                        onChange={\n                            (event) => {\n                                // function of the onChange event\n                                const copyOfTicketState = {...ticket}\n                                // copying the value of the ticket state variable into a mutable variable\n                                // state variables can't be modified directly\n                                copyOfTicketState.description = event.target.value\n                                // assigning to the key of description on the copyOfTicketState variable\n                                // the value of the event.target\n                                updateTicket(copyOfTicketState)\n                                // invoking the updateTicket state setter function with the copyOfTicketState variable\n                                // with the value of the event assigned to the description value \n                        }} />\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Emergency:</label>\n                    <input type=\"checkbox\"\n                        onChange={\n                            (event) => {\n                                const copyOfTicketState = {...ticket}\n                                copyOfTicketState.emergency = event.target.checked\n                                updateTicket(copyOfTicketState)\n                            }\n                        } />\n                </div>\n            </fieldset>\n            <button className=\"btn btn-primary\" onClick={submitTicket}>\n                {/* Invoking the submitTicket function which runs all of the code above */}\n                {/* creating the ticket and sending it to the API */}\n                Submit Ticket\n            </button>\n        </form>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}